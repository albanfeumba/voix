import streamlit as st
import os
import re
from dotenv import load_dotenv, find_dotenv
import requests
#import uuid
import time
import tempfile
import numpy as np
import sounddevice as sd
from scipy.io.wavfile import write
import speech_recognition as sr
from gtts import gTTS
from langdetect import detect, DetectorFactory
from langdetect.lang_detect_exception import LangDetectException

# --- Fonctions utilitaires audio/langue ---

def detecter_langue(texte):
    """D√©tecte la langue du texte de mani√®re robuste."""
    try:
        DetectorFactory.seed = 0
        texte_propre = re.sub(r'[^\w\s]', '', texte.strip())
        if len(texte_propre.split()) < 2:
            return "fr"
        langue = detect(texte_propre)
        return langue
    except LangDetectException:
        return "fr"
    except Exception:
        return "fr"

def parler(texte, langue="auto"):
    """Synth√®se vocale avec d√©tection automatique de la langue et lecture audio."""
    try:
        if langue == "auto":
            langue_detectee = detecter_langue(texte)
        else:
            langue_detectee = langue
        mapping_langues = {
            'fr': 'fr', 'en': 'en', 'es': 'es', 'de': 'de', 'it': 'it', 'pt': 'pt', 'ru': 'ru', 'ja': 'ja',
            'zh-cn': 'zh', 'zh-tw': 'zh-tw', 'ko': 'ko', 'ar': 'ar', 'hi': 'hi', 'nl': 'nl', 'sv': 'sv',
            'da': 'da', 'no': 'no', 'fi': 'fi', 'el': 'el', 'tr': 'tr', 'pl': 'pl', 'uk': 'uk'
        }
        langue_finale = mapping_langues.get(langue_detectee, langue_detectee)
        tts = gTTS(text=texte, lang=langue_finale, slow=False)
        with tempfile.NamedTemporaryFile(delete=False, suffix='.mp3') as tmp_file:
            temp_filename = tmp_file.name
        tts.save(temp_filename)
        os.system(f"afplay {temp_filename}")  # macOS
        os.unlink(temp_filename)
    except Exception as e:
        print(f"Erreur lors de la synth√®se vocale: {e}")

'''def ecouter(duree_enregistrement=15, frequence_echantillonnage=44100):
    """Enregistre la voix de l'utilisateur et retourne le texte reconnu."""
    print("Parlez maintenant...")
    try:
        enregistrement = sd.rec(int(duree_enregistrement * frequence_echantillonnage),
                                samplerate=frequence_echantillonnage,
                                channels=1, dtype='int16')
        sd.wait()
    except Exception as e:
        print(f"Erreur lors de l'enregistrement: {e}")
        return ""
    fichier_temp = "temp_audio.wav"
    try:
        write(fichier_temp, frequence_echantillonnage, enregistrement)
    except Exception as e:
        print(f"Erreur lors de la sauvegarde: {e}")
        return ""
    recognizer = sr.Recognizer()
    try:
        with sr.AudioFile(fichier_temp) as source:
            recognizer.adjust_for_ambient_noise(source)
            audio_data = recognizer.record(source)
    except Exception as e:
        print(f"Erreur lors de la lecture du fichier audio: {e}")
        return ""
    try:
        texte_utilisateur = recognizer.recognize_google(audio_data, language='fr-FR')
        print(f"Vous avez dit : {texte_utilisateur}")
        return texte_utilisateur
    except sr.UnknownValueError:
        print("D√©sol√©, je n'ai pas compris.")
        return ""
    except sr.RequestError as e:
        print(f"Erreur de service; {e}")
        return ""
    finally:
        try:
            os.unlink(fichier_temp)
        except:
            pass
'''
# ...dans la fonction chat_interactif...

def chat_interactif(consignes, modele, point_ia, point_user):
    """Boucle de dialogue interactif affichant tout l'historique."""
    st.session_state.setdefault("chat_history", [])
    st.info(f"L'IA d√©fend le point de vue : **{point_ia}**\n\nVous d√©fendez : **{point_user}**")
    st.markdown("---")
    for msg in st.session_state["chat_history"]:
        if msg["role"] == "user":
            st.markdown(f"**Vous :** {msg['content']}")
        else:
            st.markdown(f"**IA :** {msg['content']}")
    st.markdown("---")
    # Saisie utilisateur (texte ou micro)
    user_input = st.text_input("Exprimez-vous ou cliquez sur le micro pour parler :", key="chat_input")
    # Remplace le bouton "Parler" par "Envoyer"
    if st.button("üì§ Envoyer", key="btn_envoyer"):
        if user_input:
            st.session_state["chat_history"].append({"role": "user", "content": user_input})
            # Pr√©pare la consigne pour l'IA
            consigne_ia = (
                f"Tu es un professeur qui d√©fend le point de vue suivant : {point_ia}.\n"
                f"L'utilisateur d√©fend ce point de vue : {point_user}.\n"
                f"R√©ponds bri√®vement (3-4 phrases max, 250 mots max), en restant courtois et en argumentant uniquement pour ton point de vue.\n"
                "Evite les r√©p√©titions inutiles et d'√™tre redondant ou m√™me hors sujet et vague.\n"
                "Donne des exemples concrets et pertinents pour illustrer tes arguments.\n"
                f"Ne change jamais de position, m√™me si l'utilisateur insiste.\n"
                "Si le point de vue de l'utilisateur est valide, reconnais-le bri√®vement mais r√©affirme ton propre point de vue.\n"
                "Si l'utilisateur d√©vie du sujet, ram√®ne-le poliment √† la question principale.\n"
                f"R√©ponds dans la langue du d√©bat."
                f"Si l'utilisateur s'exprime dans une autre langue differente de celle du d√©bat, r√©ponds dans la langue du d√©bat que tu ne comprends pas ce qu'il dit et ramene le dans la langue du d√©bat."
            )
            # Appel du mod√®le
            reponse_ia = reponse(consigne_ia, user_input)
            st.session_state["chat_history"].append({"role": "ia", "content": reponse_ia})
            parler(reponse_ia)
            st.rerun()

def compute_global_score(correction_text):
    details = []
    total = 0.0
    maxi = 0.0
    current_q = None
    num_questions = 0
    num_correct = 0
    for line in correction_text.splitlines():
        s = line.strip()
        if not s:
            continue
        if s.lower().startswith("question:"):
            current_q = s
            num_questions += 1
        m = re.search(r"Note\s*:\s*(\d+(?:\.\d+)?)\s*/\s*(\d+(?:\.\d+)?)", s)
        if m:
            pts = float(m.group(1))
            mx = float(m.group(2))
            total += pts
            maxi += mx
            details.append({"question": current_q or "Question", "points": f"{pts}/{mx}"})
            if mx > 0 and abs(pts - mx) < 1e-6:
                num_correct += 1
    pourcentage_points = round(100.0 * total / maxi, 1) if maxi > 0 else 0.0
    percent_correct = round(100.0 * num_correct / num_questions, 1) if num_questions > 0 else 0.0
    appreciation = (
        "Excellent" if pourcentage_points >= 85 else
        "Tr√®s bien" if pourcentage_points >= 75 else
        "Bien" if pourcentage_points >= 65 else
        "Assez bien" if pourcentage_points >= 55 else
        "Passable" if pourcentage_points >= 50 else
        "Insuffisant"
    )
    return {
        "total_points_obtenus": int(total) if float(total).is_integer() else round(total, 2),
        "total_points_max": int(maxi) if float(maxi).is_integer() else round(maxi, 2),
        "pourcentage": pourcentage_points,
        "num_questions": num_questions,
        "num_correct": num_correct,
        "percent_correct": percent_correct,
        "appreciation": appreciation,
        "details": details,
    }

def correct_with_model(user_answers, langue_parlee):
    # Ne r√©cup√®re plus le texte PDF ici !
    # texte_pdf = st.session_state.get("source_pdf_text", "")
    generated_text = st.session_state.get("exercice_genere", "")
    answers = st.session_state.get("answers", {})
    answers=user_answers
    if not generated_text or not answers:
        st.error("Donn√©es insuffisantes pour corriger.")
        return

    consignes = (
        "Tu es un correcteur d'examen de langue. Voici l'√©nonc√© et les questions QCM suivies des r√©ponses de l'√©l√®ve.\n"
        "Corrige chaque question en indiquant la bonne r√©ponse (A, B, C ou D), puis indique si la r√©ponse de l'√©l√®ve est correcte ou non.\n"
        "Fait attention, et n'oublie pas de strictement et formellement mentionner la r√©ponse donn√©e par l'√©l√®ve.\n"
        "Respecte strictement et formellement le format suivant pour chaque question :\n"
        "Respecte strictement et formellement les retours √† la ligne.\n"
        "Format attendu :\n"
        "Question: [Numero de la question et ensuite Question]\n"
        f"Tu dois dire R√©ponse correcte : [A/B/C/D] en {langue_parlee} \n"
        f"Tu dois dire R√©ponse √©l√®ve : [A/B/C/D ou texte] en {langue_parlee} \n"
        f"R√©sultat : [Correct/Incorrect en {langue_parlee}, avec explication de la r√©ponse en 2-4 phrases dans {langue_parlee}]\n"
        "Note: 0/1\n"
        "(R√©p√©ter pour chaque question)\n"
    )
    prompt = (
        "EXERCICES G√âN√âR√âS:\n" + generated_text + "\n\n" +
        "R√âPONSES √âTUDIANT (cl√© -> r√©ponse):\n" + str(answers)
    )
    #st.write(generated_text)
    with st.spinner("Correction en cours..."):
        result = reponse(consignes, prompt)
    if result:
        st.subheader("üìò Correction d√©taill√©e")
        st.markdown(result)
        st.session_state["corrected_report"] = result
        st.subheader("üèÅ Synth√®se et Note Globale")
        synthese = compute_global_score(result)
        #st.write(synthese)
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric("R√©ponses justes", f"{synthese['num_correct']} / {synthese['total_points_max']}")
        with col2:
            st.metric("% r√©ponses justes", f"{synthese['pourcentage']}%")
        with col3:
            st.metric("Score points", f"{synthese['total_points_obtenus']} / {synthese['total_points_max']}")
        with col4:
            st.metric("Mention", synthese['appreciation'])
        with st.expander("D√©tails de la notation par question"):
            for item in synthese["details"]:
                st.write(f"- {item['question']} ‚Üí {item['points']} pt(s)")
    else:
        st.error("La correction n'a pas pu √™tre g√©n√©r√©e.")
        st.write("Debug - R√©sultat IA :", result)


# Place les fonctions ici, juste apr√®s les imports
def recupere_texte(exercice_genere):
    blocs = [b for b in exercice_genere.split("\n\n") if b.strip()]
    texte_blobs = []
    for bloc in blocs:
        if re.match(r"^1\s*\.", bloc.strip()):
            break
        texte_blobs.append(bloc)
    return "\n\n".join(texte_blobs)

def questions(exercice_genere):
    blocs = [b for b in exercice_genere.split("\n\n") if b.strip()]
    question_blobs = []
    i = 0
    while i < len(blocs):
        bloc = blocs[i]
        if re.match(r"^\d+\s*\.", bloc.strip()):
            question = bloc
            options = []
            j = i + 1
            while j < len(blocs) and not re.match(r"^\d+\s*\.", blocs[j].strip()):
                options.append(blocs[j])
                j += 1
            bloc_complet = question + "\n" + "\n".join(options)
            question_blobs.append(bloc_complet)
            i = j
        else:
            i += 1
    return question_blobs

env_path = find_dotenv(filename=".env", usecwd=True)
load_dotenv(dotenv_path=env_path, override=True)
api_key = os.getenv('OPENROUTER_API_KEY')
modele = "x-ai/grok-4-fast:free"


def reponse(consignes, texte):
    headers = {
        "Authorization": f"Bearer {api_key}",
        "HTTP-Referer": "http://localhost:8888/",
        "Content-Type": "application/json"
    }
    api_url = "https://openrouter.ai/api/v1/chat/completions"
    payload = {
        "model": modele,
        "messages": [
            {"role": "system", "content": consignes},
            {"role": "user", "content": texte}
        ]
    }
    response = requests.post(api_url, json=payload, headers=headers)
    response_json = response.json()
    resume = response_json['choices'][0]['message']['content']
    return resume


# Fonction pour g√©n√©rer l'exercice
def generer_exercice(langue, niveau, type_exercice):
    """
    G√©n√®re un exercice selon la langue, le niveau et le type d'exercice choisi.
    Stocke le r√©sultat dans st.session_state.exercice_genere.
    """
    if not langue or not niveau:
        st.warning("Veuillez saisir la langue et le niveau.")
        return

    consignes = ""
    if type_exercice == "Grammaire":
        consignes = (
            "Respecte FORMELLEMENT ET STRICTEMENT le format demand√©.\n\n"
            "Va sur des themes varies et actuels, pas des sujets classiques.\n\n"
            "Finance, technologie, environnement, soci√©t√©, culture, science, sant√©, √©ducation, voyages, etc.\n\n"
            f"Tu es un enseignant de {langue} et tu donnes cours √† des √©l√®ves de niveau {niveau}.\n"
            f"√Ä partir du texte fourni, g√©n√®re EXCLUSIVEMENT des exercices de grammaire sous forme de phrases √† compl√©ter, "
            f"parfaitement adapt√©es au niveau {niveau}, et pr√™tes √† √™tre utilis√©es dans un examen √©crit.\n\n"
            "Les bonnes reponses doivent strictement et formellement etre uniformement repartir entre les lettres A, B, C et D (Evite de concentrer les bonnes reponses sur une meme lettre).\n"
            "### EXIGENCES SP√âCIFIQUES POUR LES QCM DE GRAMMAIRE ###\n"
            "‚Ä¢ Produire exactement 20 questions QCM (pas plus, pas moins)\n"
            "‚Ä¢ Chaque question doit √™tre une phrase comportant un ou plusieurs espaces vides (___) √† compl√©ter\n"
            "‚Ä¢ Les espaces doivent concerner un point de grammaire pr√©cis (conjugaison, accord, pr√©position, article, pronom, etc.)\n"
            "‚Ä¢ Une seule question par bloc, num√©rot√©e clairement (1. 2. 3. ...)\n"
            "‚Ä¢ Chaque option doit appara√Ætre sur UNE LIGNE DISTINCTE (A), B), C), D))\n"
            "‚Ä¢ AUCUN saut de ligne entre la phrase et les options\n"
            "‚Ä¢ Saut de 2 lignes vides apr√®s la derni√®re option avant la question suivante\n"
            "‚Ä¢ Alignement vertical parfait des options\n"
            "‚Ä¢ Espacement uniforme pour une mise en page claire\n"
            "‚Ä¢ Aucune r√©ponse ou correction ne doit appara√Ætre\n\n"
            "### FORMATAGE EXIG√â ###\n"
            "[Num√©ro]. [Phrase avec espace(s) √† compl√©ter : ¬´ ‚Ä¶ ___ ‚Ä¶ ¬ª]\n"
            "A) [Option A]\n"
            "B) [Option B]\n"
            "C) [Option C]\n"
            "D) [Option D]\n"
            "(laisser 2 lignes vides)\n\n"
            "### R√àGLES COMMUNES ###\n"
            "‚Ä¢ Ne pas inventer de contenu ext√©rieur au texte fourni\n"
            f"‚Ä¢ Les questions doivent rester adapt√©es au niveau {niveau}\n"
            "‚Ä¢ Num√©rotation coh√©rente (1 √† 20)\n"
            "‚Ä¢ Options toujours list√©es de A) √† D)\n"
            "‚Ä¢ Style professionnel, clair et homog√®ne\n\n"
            "### VALIDATION FINALE ###\n"
            "‚úì V√©rifier qu‚Äôil y a exactement 20 questions QCM\n"
            "‚úì V√©rifier qu‚Äôaucune r√©ponse n‚Äôappara√Æt\n"
            "‚úì V√©rifier que chaque question et ses options respectent le formatage\n"
            "‚úì V√©rifier que l‚Äôespacement est r√©gulier et lisible\n\n"
            "‚ö†Ô∏è G√âN√àRE UNIQUEMENT des QCM de grammaire sous forme de phrases √† compl√©ter, "
            "dans le format indiqu√© ci-dessus, sans aucun ajout, commentaire ou explication suppl√©mentaire."
        )

    elif type_exercice == "Vocabulaire":
        consignes = (
            "Va sur des themes varies et actuels, pas des sujets classiques.\n\n"
            "Finance, technologie, environnement, soci√©t√©, culture, science, sant√©, √©ducation, voyages, etc.\n\n"
            "Respecte FORMELLEMENT ET STRICTEMENT le format demand√©.\n\n"
            f"Tu es un enseignant de {langue} et tu donnes cours √† des √©l√®ves de niveau {niveau}.\n"
            f"√Ä partir du texte fourni, g√©n√®re EXCLUSIVEMENT des exercices de vocabulaire, "
            f"parfaitement adapt√©s √† {niveau}, dans un format pr√™t √† √™tre utilis√© dans un examen √©crit.\n\n"
            "Les bonnes reponses doivent strictement et formellement etre uniformement repartir entre les lettres A, B, C et D (Evite de concentrer les bonnes reponses sur une meme lettre).\n"
            "### EXIGENCES SP√âCIFIQUES POUR QCM DE VOCABULAIRE ###\n"
            "‚Ä¢ Produire exactement 20 questions QCM (pas plus, pas moins)\n"
            "‚Ä¢ Chaque question doit √™tre une phrase comportant un espace vide (___) √† compl√©ter avec le mot appropri√©\n"
            "‚Ä¢ Les propositions doivent √™tre coh√©rentes et toutes de m√™me nature grammaticale (ex : 4 verbes, 4 adjectifs, 4 noms...)\n"
            "‚Ä¢ Chaque question doit tenir sur une ou deux lignes maximum (jamais coup√©e en plein milieu)\n"
            "‚Ä¢ Une seule question par bloc, num√©rot√©e clairement (1. 2. 3. ...)\n"
            "‚Ä¢ Chaque option doit appara√Ætre sur UNE LIGNE DISTINCTE (A), B), C), D))\n"
            "‚Ä¢ AUCUN saut de ligne entre la question et les options\n"
            "‚Ä¢ Saut de 2 lignes vides apr√®s la derni√®re option avant la question suivante\n"
            "‚Ä¢ Alignement vertical parfait des options\n"
            "‚Ä¢ Espacement uniforme pour une mise en page claire\n"
            "‚Ä¢ Aucune r√©ponse ou correction ne doit appara√Ætre\n\n"
            "### FORMATAGE EXIG√â ###\n"
            "[Num√©ro]. [Phrase avec espace vide ___]\n"
            "A) [Option A]\n"
            "B) [Option B]\n"
            "C) [Option C]\n"
            "D) [Option D]\n"
            "(laisser 2 lignes vides)\n\n"
            "### R√àGLES COMMUNES ###\n"
            "‚Ä¢ Ne pas inventer de contenu ext√©rieur au texte fourni\n"
            f"‚Ä¢ Les questions doivent rester adapt√©es au niveau {niveau}\n"
            "‚Ä¢ Num√©rotation coh√©rente (1 √† 20)\n"
            "‚Ä¢ Options toujours list√©es de A) √† D)\n"
            "‚Ä¢ Style professionnel et lisible\n\n"
            "### VALIDATION FINALE ###\n"
            "‚úì V√©rifier qu‚Äôil y a exactement 20 questions QCM\n"
            "‚úì V√©rifier qu‚Äôaucune r√©ponse n‚Äôappara√Æt\n"
            "‚úì V√©rifier que chaque question et ses options respectent le formatage\n"
            "‚úì V√©rifier que l‚Äôespacement est r√©gulier et lisible\n\n"
            "‚ö†Ô∏è G√âN√àRE UNIQUEMENT des QCM de vocabulaire dans le format indiqu√© ci-dessus, "
            "sans aucun ajout, commentaire ou explication suppl√©mentaire."
        )

    elif type_exercice == "Etude de texte":
        consignes = (
            "Va sur des themes varies et actuels, pas des sujets classiques.\n\n"
            "Finance, technologie, environnement, soci√©t√©, culture, science, sant√©, √©ducation, voyages, art, etc.\n\n"
            "Respecte FORMELLEMENT ET STRICTEMENT le format demand√©.\n\n"
            f"Tu es un enseignant de {langue} et tu donnes cours √† des √©l√®ves de niveau {niveau}.\n"
            f"Ton r√¥le est de cr√©er un exercice complet d‚Äô√©tude de texte, de type Etude de texte, "
            f"similaire √† ceux que l‚Äôon trouve dans des tests de langue officiels.\n\n"
            "Les bonnes reponses doivent strictement et formellement etre uniformement repartir entre les lettres A, B, C et D (Evite de concentrer les bonnes reponses sur une meme lettre).\n"
            "### √âTAPE 1 : TEXTE DE R√âF√âRENCE ###\n"
            "‚Ä¢ G√©n√©rer un texte original, clair et authentique, parfaitement adapt√© au niveau indiqu√©.\n"
            "‚Ä¢ Le texte doit avoir une longueur comprise entre 400 et 600 mots.\n"
            "‚Ä¢ Le contenu doit √™tre r√©aliste et coh√©rent (article, r√©cit, dialogue, extrait d‚Äôessai, annonce, etc.), selon les pratiques des examens de langue.\n"
            "‚Ä¢ La langue du texte doit correspondre √† la mati√®re choisie.\n\n"
            "‚Ä¢ Fait en un seul paragraphe, soit en plusieurs paragraphes courts (3 √† 5 lignes chacun) pour faciliter la lecture.\n"
            "‚Ä¢ Ensuite tu produis un questionnaire de 20 questions QCM bas√©es sur ce texte.\n\n"
            "### √âTAPE 2 : QCM D‚Äô√âTUDE DE TEXTE ###\n"
            "‚Ä¢ Produire exactement 20 questions QCM (pas plus, pas moins).\n"
            "‚Ä¢ Les questions doivent porter sur : compr√©hension globale, compr√©hension fine, vocabulaire en contexte, structure de phrases, intention de l‚Äôauteur, r√©f√©rences implicites, etc.\n"
            "‚Ä¢ Chaque question doit √™tre concise (1 √† 2 lignes maximum).\n"
            "‚Ä¢ Une seule question par bloc, num√©rot√©e clairement (1. 2. 3. ...).\n"
            "‚Ä¢ Chaque option doit appara√Ætre sur UNE LIGNE DISTINCTE (A), B), C), D)).\n"
            "‚Ä¢ Saut de ligne entre la question et les options.\n"
            "‚Ä¢ Saut de 2 lignes vides apr√®s la derni√®re option avant la question suivante.\n"
            "‚Ä¢ Alignement vertical parfait des options.\n"
            "‚Ä¢ Aucune r√©ponse ou correction ne doit appara√Ætre.\n\n"
            "### FORMATAGE EXIG√â  A RESPECTER FORMELLEMENT ET STRICTEMENT ###\n"
            "[D‚Äôabord le TEXTE complet ou √©nonc√©, puis les QCM selon le format suivant : A RESPECTER FORMELLEMENT ET STRICTEMENT]\n\n"
            "[Num√©ro]. [Question compl√®te]\n"
            "(ligne vide)\n"
            "A) [Option A]\n"
            "B) [Option B]\n"
            "C) [Option C]\n"
            "D) [Option D]\n"
            "(laisser 2 lignes vides)\n\n"
            "### R√àGLES COMMUNES ###\n"
            "‚Ä¢ Ne pas inventer de contenu qui ne soit pas li√© au texte g√©n√©r√©.\n"
            f"‚Ä¢ Les questions doivent rester adapt√©es au niveau {niveau}.\n"
            "‚Ä¢ Num√©rotation coh√©rente (1 √† 20).\n"
            "‚Ä¢ Options toujours list√©es de A) √† D).\n"
            "‚Ä¢ Style professionnel et lisible.\n\n"
            "### VALIDATION FINALE ###\n"
            "‚úì V√©rifier qu‚Äôil y a bien un TEXTE avant les questions.\n"
            "‚úì V√©rifier qu‚Äôil y a exactement 20 questions QCM.\n"
            "‚úì V√©rifier qu‚Äôaucune r√©ponse n‚Äôappara√Æt.\n"
            "‚úì V√©rifier que chaque question et ses options respectent le formatage.\n"
            "‚úì V√©rifier que l‚Äôespacement est r√©gulier et lisible.\n\n"
            "‚ö†Ô∏è G√âN√àRE UNIQUEMENT le TEXTE suivi des 20 QCM dans le format indiqu√© ci-dessus, sans aucun ajout, commentaire ou explication suppl√©mentaire."
        )

    elif type_exercice == "Exercices de conjugaison":
        consignes = (
            "Va sur des themes varies et actuels, pas des sujets classiques.\n\n"
            "Finance, technologie, environnement, soci√©t√©, culture, science, sant√©, √©ducation, voyages, etc.\n\n"
            "Respecte FORMELLEMENT ET STRICTEMENT le format demand√©.\n\n"
            f"Tu es un enseignant de {langue} pour des √©l√®ves de niveau {niveau}.\n"
            f"√Ä partir du texte fourni, g√©n√®re EXCLUSIVEMENT 20 exercices de conjugaison adapt√©s √† {niveau}.\n"
            "Les bonnes reponses doivent strictement et formellement etre uniformement repartir entre les lettres A, B, C et D (Evite de concentrer les bonnes reponses sur une meme lettre).\n"
            "### EXIGENCES ###\n"
            "‚Ä¢ 20 phrases avec un verbe √† compl√©ter ¬´ ___ ¬ª\n"
            "‚Ä¢ 4 propositions par phrase (A, B, C, D)\n"
            "‚Ä¢ Une seule r√©ponse correcte (ne pas l'indiquer)\n"
            "‚Ä¢ Formatage strict:\n"
            "[Num√©ro]. [Phrase avec ___]\n"
            "(ligne vide)\n"
            "A) [Option A]\n"
            "B) [Option B]\n"
            "C) [Option C]\n"
            "D) [Option D]\n"
            "(2 lignes vides)\n"
            "### R√àGLES ###\n"
            "‚Ä¢ Utiliser uniquement le texte fourni\n"
            f"‚Ä¢ Adapter au niveau {niveau}\n"
            "‚Ä¢ Num√©rotation 1 √† 20\n"
            "‚Ä¢ Options toujours A) √† D)\n"
            "‚ö†Ô∏è UNIQUEMENT les exercices sans commentaires."
        )

    elif type_exercice == "Dialogue interactif":
        consignes = (
            f"Tu es un enseignant de {langue} et tu donnes cours √† des √©l√®ves de niveau {niveau}.\n"
            f"√Ä partir du texte fourni, g√©n√®re EXCLUSIVEMENT un texte complet dans la langue {langue}, "
            f"adapt√© au niveau {niveau}, avec un style clair, correct et professionnel.\n\n"
            "Va sur des themes varies et actuels, pas des sujets classiques.\n\n"
            "Finance, technologie, environnement, soci√©t√©, culture, science, sant√©, √©ducation, voyages, etc.\n\n"
            "### EXIGENCES PRINCIPALES ###\n"
            "‚Ä¢ G√©n√©rer uniquement du texte, sans QCM, exercices, commentaires ou explications\n"
            "‚Ä¢ Le texte doit avoir une longueur comprise entre 200 et 300 mots.\n"
            "‚Ä¢ Respecter la langue de la mati√®re\n"
            f"‚Ä¢ La profondeur du texte doit √™tre adapt√© au niveau {niveau}\n"
            "‚Ä¢ Style clair, grammaticalement correct, fluide et coh√©rent\n"
            "‚Ä¢ Aucun contenu ext√©rieur ou invent√© n‚Äôest autoris√©\n"
            "‚Ä¢ Le texte doit pouvoir √™tre utilis√© directement dans un document p√©dagogique ou examen\n\n"
            "### FORMATAGE ###\n"
            "‚Ä¢ Texte continu, structur√© en paragraphes si n√©cessaire\n"
            "‚Ä¢ Orthographe, ponctuation et grammaire irr√©prochables\n"
            "‚Ä¢ Aucun titre, num√©ro, ou balise sp√©ciale n‚Äôest n√©cessaire\n\n"
            "### VALIDATION FINALE ###\n"
            "‚úì V√©rifier que le texte est exclusivement dans la langue de la mati√®re\n"
            "‚úì V√©rifier qu‚Äôil est adapt√© au niveau demand√©\n"
            "‚úì V√©rifier qu‚Äôaucun √©l√©ment suppl√©mentaire n‚Äôappara√Æt\n\n"
            "‚ö†Ô∏è G√âN√àRE UNIQUEMENT du texte dans la langue de la mati√®re, "
            "sans aucun ajout, commentaire, question ou explication suppl√©mentaire."
        )

    if consignes:
        with st.spinner("G√©n√©ration en cours..."):
            exercice = reponse(consignes, "")
        st.session_state.exercice_genere = exercice

# Utilisation :
# if st.button("G√©n√©rer exercice"):
#     generer_exercice(langue, niveau, type_exercice)

import re

def parse_grammaire(text: str):
    """Parse les exercices de grammaire au format QCM."""
    questions = []
    current = None
    for line in text.splitlines():
        s = line.strip()
        if re.match(r"^\d+\.", s):
            if current:
                questions.append(current)
            current = {"question": s, "options": []}
        elif re.match(r"^[ABCD]\)", s):
            if current is not None:
                current["options"].append(s)
        else:
            if current is not None and current["options"]:
                current["options"][-1] += " " + s
            elif current is not None:
                current["question"] += " " + s
    if current:
        questions.append(current)
    return questions

def parse_vocabulaire(text: str):
    """Parse les exercices de vocabulaire au format QCM."""
    # Identique √† grammaire, m√™me format
    return parse_grammaire(text)

def parse_conjugaison(text: str):
    """Parse les exercices de conjugaison au format QCM."""
    # Identique √† grammaire, m√™me format
    return parse_grammaire(text)

def parse_etude_de_texte(text: str):
    """Parse les exercices d'√©tude de texte : extrait le texte puis les QCM."""
    blocs = [b for b in text.split("\n\n") if b.strip()]
    texte = ""
    questions = []
    # On suppose que le premier bloc est le texte, le reste les questions
    if blocs:
        texte = blocs[0]
        for bloc in blocs[1:]:
            lignes = [l for l in bloc.split("\n") if l.strip()]
            if not lignes:
                continue
            question = lignes[0]
            options = [l for l in lignes if l.strip().startswith(("A)", "B)", "C)", "D)"))]
            questions.append({"question": question, "options": options})
    return {"texte": texte, "questions": questions}

def parse_dialogue_interactif(text: str):
    """
    Parse le texte g√©n√©r√© pour l'exercice 'Dialogue interactif'.
    Retourne le texte sous forme d'un seul bloc (tout le texte d'un coup).
    """
    # Nettoie les espaces superflus et retourne le texte complet
    return text.strip()

# --- Int√©gration dans render_interactive_exercises ---

# ...existing code...

def render_interactive_exercises(type_exercice, langue, niveau, langue_parlee):
    generated_text = st.session_state.get("exercice_genere", "")
    generated_type = type_exercice
    meta = {
        "matiere": langue,
        "niveau": niveau,
    }
    if not generated_text or not generated_type:
        st.info("Aucun exercice en m√©moire. G√©n√©rez d'abord un contenu.")
        st.write({
            "has_generated_text": bool(generated_text),
            "generated_type": generated_type,
        })
        return

    st.subheader("üìù R√©pondez aux exercices")
    st.caption(f"Type: {generated_type} ‚Äî Mati√®re: {meta.get('matiere','')} ‚Äî Niveau: {meta.get('niveau','')}")

    # Initialisation des r√©ponses
    if "answers" not in st.session_state:
        st.session_state.answers = {}

    # Grammaire, Vocabulaire, Conjugaison : QCM
    if generated_type in ["Grammaire", "Vocabulaire", "Exercices de conjugaison"]:
        items = parse_grammaire(generated_text)
        for idx, q in enumerate(items, 1):
            st.markdown(f"**{q['question']}**")
            key = f"qcm_{idx}"
            choice = st.radio("Votre r√©ponse", options=["A", "B", "C", "D"], horizontal=True, key=key)
            st.session_state.answers[key] = choice
            with st.expander("Afficher les options"):
                for opt in q["options"]:
                    st.write(opt)
            st.markdown("---")
        # Correction : r√©cup√®re toutes les r√©ponses dans l'ordre
        if st.button("‚úÖ Valider et corriger", key="btn_validate_correct"):
            user_answers = [st.session_state.answers.get(f"qcm_{i+1}", "") for i in range(len(items))]
            #st.write("Debug - R√©ponses utilisateur :", user_answers)
            #with st.spinner("Correction en cours..."):
            correction = correct_with_model(user_answers, langue_parlee) #corrige_exercice(generated_text, user_answers)
            #st.subheader("üìò Correction d√©taill√©e")
            #st.markdown(correction)


    # Etude de texte : affiche d'abord le texte puis les questions/options
    elif generated_type == "Etude de texte":
        texte = recupere_texte(generated_text)
        questions_list = questions(generated_text)
        st.markdown("**Texte :**")
        st.markdown(texte)
        st.markdown("---")
        for idx, bloc in enumerate(questions_list, 1):
            lignes = [l for l in bloc.split("\n") if l.strip()]
            question = lignes[0] if lignes else ""
            options = [l for l in lignes if l.strip().startswith(("A)", "B)", "C)", "D)"))]
            st.markdown(f"**{question}**")
            key = f"etude_{idx}"
            choice = st.radio("Votre r√©ponse", options=["A", "B", "C", "D"], horizontal=True, key=key)
            st.session_state.answers[key] = choice
            with st.expander("Afficher les options"):
                for opt in options:
                    st.write(opt)
            st.markdown("---")
        # Correction : r√©cup√®re toutes les r√©ponses dans l'ordre
        if st.button("‚úÖ Valider et corriger", key="btn_validate_correct"):
            user_answers = [st.session_state.answers.get(f"etude_{i+1}", "") for i in range(len(questions_list))]
            #with st.spinner("Correction en cours..."):
            correction = correct_with_model(user_answers, langue_parlee) #corrige_exercice(generated_text, user_answers)
            #st.subheader("üìò Correction d√©taill√©e")
            #st.markdown(correction)
            # Synth√®se globale
     #       synthese = compute_global_score(correction)
      #      st.subheader("üèÅ Synth√®se et Note Globale")
       #     st.write(synthese["appreciation"])



    # Dialogue interactif
    if generated_type == "Dialogue interactif":
        st.markdown("**Texte g√©n√©r√© :**")
        bloc = parse_dialogue_interactif(generated_text)
        st.markdown(bloc)
        if st.button("üöÄ D√©marrer le dialogue", key="btn_start_dialogue"):
            langue_du_texte = detecter_langue(bloc)
            consignes = (
                f"Lis le texte ci-dessous et propose 3 √† 5 points de vue ou positions diff√©rentes que l'on peut avoir sur ce texte. "
                f"Pour chaque point de vue, donne une phrase courte et claire qui r√©sume ce point de vue. "
                f"Retourne uniquement la liste des points de vue, sans explication ni commentaire. "
                f"R√âPONDS STRICTEMENT dans la langue suivante : {langue_du_texte}."
            )
            prompt = bloc
            with st.spinner("Analyse des points de vue en cours..."):
                result = reponse(consignes, prompt)
            points = [p.strip("-‚Ä¢1234567890. ") for p in result.split("\n") if p.strip()]
            st.session_state["points_vue"] = points
            st.session_state["dialogue_ready"] = True
            st.rerun()
        if st.session_state.get("dialogue_ready"):
            points = st.session_state.get("points_vue", [])
            if points:
                st.markdown("**Choisissez un point de vue √† discuter, votre objectif sera de d√©fendre ce point de vue :**")
                choix = st.radio("Points de vue propos√©s :", points, key="radio_points_vue")
                st.session_state.answers["point_de_vue"] = choix
                if st.button("üî• Let's go", key="btn_lets_go"):
                    autres = [p for p in points if p != choix]
                    import random
                    if autres:
                        point_ia = random.choice(autres)
                    else:
                        point_ia = "Un autre point de vue"
                    st.session_state["point_ia"] = point_ia
                    st.session_state["point_user"] = choix
                    st.session_state["chat_history"] = []
                    st.session_state["chat_started"] = True
                    st.rerun()
        if st.session_state.get("chat_started"):
            chat_interactif(
                consignes="",
                modele=st.session_state.get("modele", "openrouter/sonoma-sky-alpha"),
                point_ia=st.session_state.get("point_ia", ""),
                point_user=st.session_state.get("point_user", "")
            )
        return

# ...existing code...
# ...existing code...
    # ... autres types (QCM, √©tude de texte, etc.) ...

# NE PAS ex√©cuter le code Streamlit en dehors de main()
# Laisse juste les d√©finitions de fonctions et imports en dehors

# Optionnel : retire le st.set_page_config ici, laisse-le dans app.py

def main():
    if "exercice_genere" not in st.session_state:
        st.session_state.exercice_genere = None

    st.title("G√©n√©rateur d'exercices de langue")

    niveaux_scolaires = [
        "6e", "5e", "4e", "3e", "2nde", "1√®re", "Terminale",
        "Licence 1", "Licence 2", "Licence 3",
        "Master 1", "Master 2", "Doctorat"
    ]
    langues_possibles = [
        "Fran√ßais", "Anglais", "Espagnol", "Allemand", "Italien", "Portugais",
        "Arabe", "Chinois", "Japonais", "Russe", "N√©erlandais", "Grec", "Latin",
        "Turc", "Polonais", "Su√©dois", "Danois", "Finnois", "Norv√©gien", "Cor√©en",
        "Hindi", "Vietnamien", "Tha√Ø", "Roumain", "Tch√®que", "Hongrois", "Serbe",
        "Croate", "Slovaque", "Bulgare", "Ukrainien", "Persan", "H√©breu"
    ]

    langue = st.selectbox("Choisissez la langue pour l'exercice :", langues_possibles, key="selectbox_langue")
    niveau = st.selectbox("Choisissez votre niveau scolaire ou universitaire :", niveaux_scolaires, key="selectbox_niveau")
    type_exercice = st.selectbox(
        "Choisissez le type d'exercice :",
        ("Grammaire", "Vocabulaire", "Etude de texte", "Exercices de conjugaison", "Dialogue interactif"),
        key="selectbox_type_exercice"
    )
    
    # Ajout du menu pour choisir la langue parl√©e par l'√©tudiant
    langue_parlee = st.selectbox(
        "Choisissez la langue parl√©e par l'√©tudiant :",
        langues_possibles,
        key="selectbox_langue_parlee"
    )

    # Bouton g√©n√©rer toujours visible
    if st.button("G√©n√©rer exercice de langue"):
        generer_exercice(langue, niveau, type_exercice)

    # Affiche les exercices interactifs si g√©n√©r√©s
    if st.session_state.exercice_genere:
        # Passe les variables n√©cessaires √† la fonction
        render_interactive_exercises(type_exercice, langue, niveau, langue_parlee)

# Utilisation :
if __name__ == "__main__":
    main()